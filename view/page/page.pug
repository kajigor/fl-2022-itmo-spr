doctype html
html(lang="en, ru")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Document
        style 
            include ./page.css
    body 

        mixin dictblock(dict)
            .dict-block
                each val, key in dict
                    .dict-block-line
                        .dict-block-key= key
                        .dict-block-val
                            each item in val
                                if item.terminal
                                    span.green= item.val
                                else    
                                    span.not-green= item.val

        .main

            .logo
                h1 Report
                .small Визуализация CYK

            .section 
                .step
                    .step-number 1
                    .step-name Начальный вид 

                .content
                    .start-node Стартовый нетерминал <span>#{initial.start}</span>
                    +dictblock(initial.dict)
                    

            .section
                .step
                    .step-number 2
                    .step-name Приведение к нормальной форме Хомского

                .content
                    .transformation-result
                        .tr-title Финальная форма

                        +dictblock(cnf.dict)
                    
                    .transformation-process-title
                    .transformation-process
                            each val, key in transform
                                .transformation-step 
                                    .tr-step-name= key
                                    .tr-step-info= transform[key].info
                                    +dictblock(transform[key].dict)

            if cyk
                .section 
                    .step 
                        .step-number 3
                        .step-name Проверка принадлежности

                    .content
                        each item, ch_num in cyk.checks
                            .check-block
                                .check-word-block
                                    .check-word= item.word
                                    if item.verdict
                                        .check-verdict.ch-gr +
                                    else
                                        .check-verdict.ch-rd -

                                .check-container
                                    .check-left
                                        .dict-block-ch
                                            each val, key in cnf.dict
                                                .dict-block-line-ch(id='dkey_' + ch_num + '_' + key)
                                                    .dict-block-key-ch= key
                                                    .dict-block-val-ch
                                                        each item in val
                                                            if item.terminal
                                                                span.green= item.val
                                                            else    
                                                                span.not-green= item.val


                                    .check-right
                                        .check-btns
                                            button.btn.reset-btn(data-indx=ch_num) Restart
                                            button.btn.prev-btn(data-indx=ch_num) Prev
                                            button.btn.next-btn(data-indx=ch_num) Next
                                            button.btn.final-btn(data-indx=ch_num) Final
                                            input.slider(id="sl_" + ch_num, type="range", name="range", data-size=item.word.length, data-indx=ch_num, min=0, max=item.steps + 1, value=item.steps + 1)

                                        .check-matrix
                                            .check-matrix-line
                                                each l in item.word
                                                    .check-matrix-letter "#{l}"
                                            each line, i in item.result
                                                .check-matrix-line
                                                    each cell, j in line
                                                        if j > (line.length - i - 1)
                                                            .disabled-cell
                                                        else
                                                            .check-matrix-cell(class="ce_" + ch_num, id="r_" + ch_num + "_cell_" + i + "_" + j)
                                                                each item in cell
                                                                    span(data-item=item.step)= item.val

        script 
            include ./page.js